def get_node_env() {
    switch (BRANCH_NAME) {
        case 'master':
            return 'production'
        case 'develop':
            return 'development'
        default:
            return 'development'
    }
}

def get_port() {
    switch (BRANCH_NAME) {
        case 'master':
            return 3000
        case 'develop':
            return 3001
        default:
            return 3000
    }
}

def automatedTests (){
    if (NODE_ENV == 'development') {
        echo 'Running dev tests'
        sh "docker exec $CONTAINER_NAME sh -c 'yarn test'"
    } else {
        echo 'Skipping dev tests'
    }
}

def container_health_check() {
    // make a curl req to server and log response
    response = sh(
        script: "docker exec $CONTAINER_NAME sh -c 'curl -s http://localhost:3000/hello' | xargs echo",
        returnStdout: true
    )
    echo "response: $response"

    if(!response){
        echo "Container is not running"
        // throw error to stop pipeline
        error "Container is not running"
    } else {
        echo "Container is running"
        return true
    }
}

pipeline {
    agent any
    environment {
        DOCKERFILE_BASE = sh(script: 'cat devops/DockerfileBase', returnStdout: true)
        DOCKERHUB_CREDENTIALS = credentials('2255ea73-6c59-4ead-b350-a05ba2022fcc')
        REGISTRY = 'adpopescu3382/devops-playground'
        IMAGE_TAG = "node-app-${BRANCH_NAME}"
        CONTAINER_NAME = "$IMAGE_TAG-container"
        NODE_ENV = get_node_env()
        PORT = get_port()
    }

    stages {
        stage('Base image updated check') {
            steps {
                script {
                    echo 'Checking if base image needs to be updated'

                    if (currentBuild.previousBuild) {
                        echo 'Previous build found'
                        def lastDockerfileBase = currentBuild.previousBuild.buildVariables?.BASE_IMAGE
                        if (DOCKERFILE_BASE != lastDockerfileBase) {
                            echo 'DockerfileBase has changed, building new image'
                            // build new base image
                            sh "docker build -f devops/DockerfileBase -t $REGISTRY:$IMAGE_TAG-base ."
                            // docker login
                            sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                            // push image to registry
                            sh "docker push $REGISTRY:$IMAGE_TAG-base"
                            echo 'Image pushed to registry'
                        } else {
                            echo 'DockerfileBase has not changed, using existing image'
                        }
                    } else {
                        echo 'No previous build found, building new image'
                        // build new base image
                        sh "docker build -f devops/DockerfileBase -t $REGISTRY:$IMAGE_TAG-base ."
                        // docker login
                        sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                        // push image to registry
                        sh "docker push $REGISTRY:$IMAGE_TAG-base"
                        echo 'Image pushed to registry'
                    }

                    // update env variable for next build
                    env.BASE_IMAGE = DOCKERFILE_BASE
                }
            }
        }

        stage('Build') {
            steps {
                echo "Building image $REGISTRY:$IMAGE_TAG for branch $BRANCH_NAME"
                // pass base image as build arg to Dockerfile
                sh "docker build -t $REGISTRY:$IMAGE_TAG . --build-arg BASE_IMAGE=$REGISTRY:$IMAGE_TAG-base --build-arg NODE_ENV=$NODE_ENV"
            }
        }

        stage('Test') {
            steps {
                echo 'Testing..'
                // start container
                sh "docker run -d --name $CONTAINER_NAME -p 3000 $REGISTRY:$IMAGE_TAG"
                // run automated tests
                automatedTests()
                // check that server is running
                container_health_check()
            }
        }

        stage('Push to registry') {
            steps {
                echo 'Deploying....'
                // docker login
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                // push image to registry
                sh "docker push $REGISTRY:$IMAGE_TAG"
            }
        }


    }
    post { 
        always { 
            cleanWs()
            sh 'docker logout'
            // stop and remove container
            sh "if docker ps | grep '$CONTAINER_NAME'; then docker stop $CONTAINER_NAME; fi"
            sh "if docker ps -a | grep '$CONTAINER_NAME'; then docker rm $CONTAINER_NAME; fi"

            // remove image
            sh "if docker images | grep '$REGISTRY:$IMAGE_TAG'; then docker rmi $REGISTRY:$IMAGE_TAG; fi"
        }
        // TODO:
        // on failure, send email
        // on success, send email
    }
}