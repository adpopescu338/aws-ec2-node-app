pipeline {
    agent any
    environment {
        DOCKERFILE_BASE = sh(script: 'cat devops/DockerfileBase', returnStdout: true)
        DOCKERHUB_CREDENTIALS = credentials('2255ea73-6c59-4ead-b350-a05ba2022fcc')
        REGISTRY = 'adpopescu3382/devops-playground'
        IMAGE_TAG = "node-app-${BRANCH_NAME}"
        CONTAINER_NAME = 'node-app'
    }

    stages {
        stage('Check if base image needs to be updated') {
            steps {
                script {
                    echo 'Checking if base image needs to be updated'
                    echo "DOCKERFILE_BASE: $DOCKERFILE_BASE"
                    echo "-----------------------"
                    echo "DOCKERFILE_BASE: ${env.DOCKERFILE_BASE}"
                    echo "-----------------------"
                    def lastBuild = currentBuild.previousBuild
                    if (lastBuild) {
                        def lastDockerfile = lastBuild.environment.get('DOCKERFILE_BASE')
                        if (DOCKERFILE_BASE != lastDockerfile) {
                            echo 'DockerfileBase has changed, building new image'
                            sh "docker build -f devops/DockerfileBase -t $REGISTRY:$IMAGE_TAG-base ."
                            sh "docker push $REGISTRY:$IMAGE_TAG-base"
                        } else {
                            echo 'DockerfileBase has not changed, using existing image'
                        }
                    } else {
                        echo 'No previous build found, building new image'
                        sh "docker build -f devops/DockerfileBase -t $REGISTRY:$IMAGE_TAG-base ."
                        sh "docker push $REGISTRY:$IMAGE_TAG-base"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                echo 'Building..'
                echo "Building image $REGISTRY:$IMAGE_TAG"
                echo " Branch name: $BRANCH_NAME"
                echo " Branch name: $env.BRANCH_NAME"
                sh "docker build -t $REGISTRY:$IMAGE_TAG ."
            }
        }

        stage('Test') {
            steps {
                echo 'Testing..'
                // start container
                sh "docker run -d --name $CONTAINER_NAME -p 3000 $REGISTRY:$IMAGE_TAG"
                // run tests
                sh "docker exec $CONTAINER_NAME sh -c 'yarn test'"
                echo "test successfull"

                // check that server is running
                // install curl in container for this to work
                sh "docker exec $CONTAINER_NAME sh -c 'apt-get update && apt-get install -y curl'"
                sh "docker exec $CONTAINER_NAME sh -c 'curl -s http://localhost:3000/hello'"
                echo "server is running fine"
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying....'
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                sh "docker push $REGISTRY:$IMAGE_TAG"
            }
        }
    }
    post { 
        always { 
            cleanWs()
            sh 'docker logout'
            // stop and remove container
            sh "docker stop $CONTAINER_NAME"
            sh "docker rm $CONTAINER_NAME"
            // remove image
            sh "docker rmi $REGISTRY:$IMAGE_TAG"
        }
    }
}